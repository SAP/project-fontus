plugins {
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'java'
    id 'maven-publish'
    id 'idea'
}
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar


version '0.0.1-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    mavenLocal()
}

tasks.jar.configure {
    classifier = 'default'
}

dependencies {
    compile 'org.ow2.asm:asm:9.0'
    compile 'org.ow2.asm:asm-commons:9.0'
    compile 'org.ow2.asm:asm-analysis:9.0'
    compile 'org.ow2.asm:asm-util:9.0'
    compile 'info.picocli:picocli:4.1.4'
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.12.3'
    compile group: 'org.json', name: 'json', version: '20200518'
    compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'
    compile group: 'org.mutabilitydetector', name: 'asm-nonclassloadingextensions', version: '1.0-rc2'
    testCompile('org.junit.jupiter:junit-jupiter:5.4.2')
    testCompile('org.junit.jupiter:junit-jupiter-migrationsupport:5.4.2')
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
}

test {
    useJUnitPlatform()
    testLogging {
        events "skipped", "failed"
        exceptionFormat "full"
    }

    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests"
            println "\t${result.successfulTestCount} succeeded\n" +
                    "\t${result.failedTestCount} failed\n" +
                    "\t${result.skippedTestCount} skipped"
        }
    }
}

task utilJar(type: ShadowJar) {
    from(sourceSets.main.output) {
        include "**/fontus/taintaware/**"
        include "**/fontus/instrumentation/strategies/*"
        include "**/fontus/utils/**"
        include "**/fontus/Constants*"
        include "**/fontus/config/TaintStringConfig*"
        include "**/fontus/config/TaintMethod*"
        include "**/fontus/config/**"
        include "**/fontus/asm/**"
        include "**/fontus/asm/FunctionCall*" // Because of Configuration class
        include "**/fontus/agent/AgentConfig*" // Because of Configuration class
    }
    utilJar.baseName = "util"
}

task generatorJar(type: ShadowJar) {
    manifest {
        attributes(
                'Main-Class': 'com.sap.fontus.generator.Generator',
        )
    }
    from(project.convention.getPlugin(JavaPluginConvention).sourceSets.main.output)
    configurations = [project.configurations.runtime]

    baseName = 'generator'
}

task converterJar(type: ShadowJar) {
    manifest {
        attributes(
                'Main-Class': 'com.sap.fontus.converter.Converter',
        )
    }
    from(project.convention.getPlugin(JavaPluginConvention).sourceSets.main.output)
    configurations = [project.configurations.runtime]

    baseName = 'converter'
}

task aotJar(type: ShadowJar) {
    manifest {
        attributes(
                'Agent-Class': 'com.sap.fontus.agent.aot.AOTTaintAgent',
                'Can-Redefine-Classes': true,
                'Can-Retransform-Classes': true,
                'Premain-Class': 'com.sap.fontus.agent.aot.AOTTaintAgent'
        )
    }
    includeEmptyDirs = false
    from sourceSets.main.output
    include("**/agent/aot/**")
    baseName = 'aot-fontus'
}

shadowJar {
    mergeServiceFiles()
    doFirst {
        manifest {
                attributes(
                        // 'Class-Path': configurations.compile.collect{it.toURI().toString()}.join(' '),
                        'Main-Class': 'com.sap.fontus.Main',
                        'Agent-Class': 'com.sap.fontus.agent.TaintAgent',
                        'Can-Redefine-Classes': true,
                        'Can-Retransform-Classes': true,
                        'Premain-Class': 'com.sap.fontus.agent.TaintAgent'
                )
        }
    }

    // This makes sure that the generated jar has no "-all" suffix
    classifier = ''

    relocate 'com.ctc', 'com.sap.fontus.com.ctc'
    relocate 'com.fasterxml', 'com.sap.fontus.com.fasterxml'
    relocate 'org.codehaus.stax2', 'com.sap.fontus.org.codehaus.stax2'
    relocate 'org.json', 'com.sap.fontus.org.json'
    relocate 'org.mutabilitydetector', 'com.sap.fontus.org.mutabilitydetector'
    relocate 'org.objectweb', 'com.sap.fontus.org.objectweb'
    relocate 'javax.activation', 'com.sap.fontus.javax.activation'
    relocate 'javax.xml.bind', 'com.sap.fontus.javax.xml.bind'
    relocate 'picocli', 'com.sap.fontus.picocli'
    dependsOn utilJar
    dependsOn converterJar
    dependsOn generatorJar
    dependsOn aotJar
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from subprojects.collect { it.sourceSets.main.allSource }
}

shadowJar.finalizedBy sourcesJar

publishing {
    publications {
        shadow(MavenPublication) {
            from project.components.java
            groupId = 'com.sap.fontus'
            artifactId = 'fontus'
            version = '0.0.1-SNAPSHOT'
            artifact tasks.sourcesJar
            artifact tasks.shadowJar
        }

        util(MavenPublication) {
            groupId 'com.sap.fontus'
            artifactId 'util'
            version = '0.0.1-SNAPSHOT'
            artifact utilJar
        }
    }
}
