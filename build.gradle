plugins {
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'java'
    id 'maven-publish'
    id 'idea'
}
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar


version '0.0.1-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    mavenLocal()
}

tasks.jar.configure {
    classifier = 'default'
}

dependencies {
    implementation group: 'com.alibaba', name: 'druid', version: '1.2.5'
    implementation 'org.ow2.asm:asm:9.2'
    implementation 'org.ow2.asm:asm-commons:9.2'
    implementation 'org.ow2.asm:asm-analysis:9.2'
    implementation 'org.ow2.asm:asm-util:9.2'
    implementation 'info.picocli:picocli:4.1.4'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.12.3'
    implementation group: 'org.json', name: 'json', version: '20200518'
    implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'
    implementation group: 'org.mutabilitydetector', name: 'asm-nonclassloadingextensions', version: '1.0-rc2'
    testImplementation('org.junit.jupiter:junit-jupiter:5.4.2')
    testImplementation('org.junit.jupiter:junit-jupiter-migrationsupport:5.4.2')
    testImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'

    implementation 'org.owasp.encoder:encoder:1.2.2'
    implementation 'org.owasp.encoder:encoder-jsp:1.2.2'
    implementation 'com.github.jsqlparser:jsqlparser:4.2'
    implementation 'mysql:mysql-connector-java:8.0.19'

}

apply plugin: 'java'
compileJava {options.encoding = "UTF-8"}
compileTestJava {options.encoding = "UTF-8"}

test {
    useJUnitPlatform()
    testLogging {
        events "skipped", "failed"
        exceptionFormat "full"
    }

    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests"
            println "\t${result.successfulTestCount} succeeded\n" +
                    "\t${result.failedTestCount} failed\n" +
                    "\t${result.skippedTestCount} skipped"
        }
    }
}

task utilJar(type: ShadowJar) {
    from(sourceSets.main.output) {
        include "**/fontus/taintaware/**"
        include "**/fontus/instrumentation/strategies/*"
        include "**/fontus/utils/**"
        include "**/fontus/Constants*"
        include "**/fontus/config/TaintStringConfig*"
        include "**/fontus/config/TaintMethod*"
        include "**/fontus/config/**"
        include "**/fontus/asm/**"
        include "**/fontus/asm/FunctionCall*" // Because of Configuration class
        include "**/fontus/agent/AgentConfig*" // Because of Configuration class
    }
    utilJar.baseName = "util"
}

shadowJar {
    mergeServiceFiles()
    doFirst {
        manifest {
                attributes(
                        // 'Class-Path': configurations.compile.collect{it.toURI().toString()}.join(' '),
                        'Main-Class': 'com.sap.fontus.Main',
                        'Agent-Class': 'com.sap.fontus.agent.TaintAgent',
                        'Can-Redefine-Classes': true,
                        'Can-Retransform-Classes': true,
                        'Premain-Class': 'com.sap.fontus.agent.TaintAgent'
                )
        }
    }

    // This makes sure that the generated jar has no "-all" suffix
    classifier = ''

    relocate 'com.ctc', 'com.sap.fontus.com.ctc'
    relocate 'com.fasterxml', 'com.sap.fontus.com.fasterxml'
    relocate 'org.codehaus.stax2', 'com.sap.fontus.org.codehaus.stax2'
    relocate 'org.json', 'com.sap.fontus.org.json'
    relocate 'org.mutabilitydetector', 'com.sap.fontus.org.mutabilitydetector'
    relocate 'org.objectweb', 'com.sap.fontus.org.objectweb'
    relocate 'javax.activation', 'com.sap.fontus.javax.activation'
    relocate 'javax.xml.bind', 'com.sap.fontus.javax.xml.bind'
    relocate 'picocli', 'com.sap.fontus.picocli'
    relocate 'com.alibaba', 'com.sap.fontus.com.alibaba'
    relocate 'org.owasp.encoder', 'com.sap.fontus.org.owasp.encoder'
    relocate 'org.owasp.encoder-jsp', 'com.sap.fontus.org.owasp.encoder-jsp'
    relocate 'net.sf.jsqlparser', 'com.sap.fontus.net.sf.jsqlparser'
    relocate 'com.mysql', 'com.sap.fontus.com.mysql'

    dependsOn utilJar
//    dependsOn converterJar
//    dependsOn generatorJar
//    dependsOn aotJar
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from subprojects.collect { it.sourceSets.main.allSource }
}

shadowJar.finalizedBy sourcesJar

publishing {
    publications {
        shadow(MavenPublication) {
            from project.components.java
            groupId = 'com.sap.fontus'
            artifactId = 'fontus'
            version = '0.0.1-SNAPSHOT'
            artifact tasks.sourcesJar
            artifact tasks.shadowJar
        }

        util(MavenPublication) {
            groupId 'com.sap.fontus'
            artifactId 'util'
            version = '0.0.1-SNAPSHOT'
            artifact utilJar
        }
    }
}
