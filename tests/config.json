{
  "jar_tests": [
    {
      "name": "Tic Tac Toe",
      "jar_file": "tictactoe.jar",
      "entry_point": "Main",
      "input_file": "tictactoe.input"
    },
    {
      "name": "Minesweeper",
      "jar_file": "minesweeper.jar",
      "input_file": "minesweeper.input"
    },
    {
      "name": "Binary Search Tree",
      "jar_file": "bst.jar"
    }
  ],
  "single_file_tests": [
    {
      "name": "Cal",
      "source": "Cal.java",
      "arguments": ["nov", "2019"]
    },
    {
      "name": "Command Line Argument Tests",
      "source": "CommandLineArgumentTests.java",
      "arguments": ["hallo", "welt!"]
    },
    {
      "name": "Concat Tests",
      "source": "ConcatTests.java"
    },
    {
      "name": "Argument Tests",
      "source": "ArgumentTests.java"
    },
    {
      "name": "PropertyTest",
      "source": "PropertyTest.java"
    },
    {
      "name": "TestString",
      "source": "TestString.java"
    },
    {
      "name": "Quadratic Equation Solver",
      "source": "QuadraticEquation.java"
    },
    {
      "name": "Mid-Square PRNG",
      "source": "MidSquare.java"
    },
    {
      "name": "max of sigma(n) where n >= 100 && <= 999",
      "source": "SigmaMax.java"
    },
    {
      "name": "ISBN13 validation",
      "source": "ISBN.java"
    },
    {
      "name": "Happy Numbers in [5..30]",
      "source": "HappyNumbers.java"
    },
    {
      "name": "Character Set",
      "source": "CharSet.java"
    },
    {
      "name": "Stack Overflow Test",
      "source": "StackOverflow.java"
    },
    {
      "name": "String Field Test",
      "source": "StringFieldTest.java"
    },
    {
      "name": "StringBuilder Field Test",
      "source": "StringBuilderFieldTest.java"
    },
    {
      "name": "StringBuilder Local Variable Test",
      "source": "StringBuilderLocalVariableTest.java"
    },
    {
      "name": "String Array Test",
      "source": "StringArrayTest.java"
    },
    {
      "name": "String Array Field Test",
      "source": "StringArrayFieldTest.java"
    },
    {
      "name": "Lambda Function Test",
      "source": "LambdaTest.java"
    },
    {
      "name": "Lambda Function with Attribute Access Test",
      "source": "LambdaAttributeAccess.java"
    },
    {
      "name": "Method Reference Test (i.e, String::length)",
      "source": "MethodReferenceTest.java"
    },
    {
      "name": "Inner Class Example Tests",
      "source": "InnerClassExample.java"
    },
    {
      "name": "Main as a Varargs method Test",
      "source": "VarArgsMainTest.java",
      "arguments": ["hallo", "welt!"]
    },
    {
      "name": "Anonymous Classes Test",
      "source": "AnonymousClasses.java"
    },
    {
      "name": "Main as a Varargs method Test",
      "source": "VarArgsMainTest.java",
      "arguments": ["hallo", "welt!"]
    },
    {
      "name": "Static Inner Class Test",
      "source": "StaticInnerClassTest.java"
    },
    {
      "name": "Reflection Test: creating an empty String",
      "source": "ReflectionTest.java"
    },
    {
      "name": "Reflection Test: forName -> happy path",
      "source": "ReflectionTest1.java",
      "arguments": ["java.lang.Integer"]
    },
    {
      "name": "Reflection Test: forName alternate overload -> happy path",
      "source": "ReflectionTest2.java",
      "arguments": ["java.lang.Integer"]
    },
    {
      "name": "Reflection Test: creating a String with constant value via reflected constructor",
      "source": "ReflectionTestConstructor.java"
    },
    {
      "name": "Reflection Test: Accessing a class via the String.class syntax",
      "source": "ReflectionDirect.java"
    },
    {
      "name": "Static Final String instance variable",
      "source": "TestStaticFinalString.java"
    }
  ]
}
